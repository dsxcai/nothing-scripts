#!/usr/bin/env python

import struct
import os
import glob
import shutil
import optparse
import zipfile

MAGIC_SIZE = 8
MAGIC = "LaR@eZip"
MAX_ZIP_NO = 8

def isMergedZip(zipfile):
    if os.path.isfile(zipfile):
        f = open(zipfile, "rb")
        magic = f.read(MAGIC_SIZE)
        f.close()
        if magic == MAGIC:
            return True
    else:
        print "Error: %s not exist" % zipfile

    return False

def splitMergedZip(zipfile, outpath):
    header_size = 256
    offset = []
    size= []
    zip_no = 0

    ziplist = []

    if not os.path.isdir(outpath):
        os.mkdir(outpath)

    _extend = '\x00\x00\x00\x00'
    if os.path.isfile(zipfile):
        inf = open(zipfile, "rb")
        inf.seek(MAGIC_SIZE)
        for i in range(MAX_ZIP_NO):
	    of = struct.unpack('l', inf.read(4) + _extend)[0]
	    offset.append(of)
        for i in range(MAX_ZIP_NO):
	    sz = struct.unpack('l', inf.read(4) + _extend)[0]
	    size.append(sz)
        zip_no = struct.unpack('l', inf.read(4) + _extend)[0]

        for i in range(zip_no):
	    print "offset[%d]=%x" % ( i, offset[i] )
	    print "size[%d]=%x" % ( i, size[i] )
	    if offset[i] != 0:
	        part = os.path.join(outpath, "zip_%s.zip" % i)
	        print "writing %s...." % part
	        outf = file(part, 'wb')
	        inf.seek(offset[i])
	        outf.write(inf.read(size[i]))
	        outf.close()
	        ziplist.append(part)
        inf.close()
    else:
        print "Error: %s not exist" % zipfile

    return ziplist

if __name__ == '__main__':
    parser = optparse.OptionParser(usage="usage: python %prog [options] zipPath", version="UnLargezip 1.1")
    parser.add_option('-o', '--outputdir', action="store", dest="dist_dir", help='destination for extract images')
    parser.add_option('-z', '--ziponly', action="count", dest="zip_only", help='only need to extract to zip')
    parser.add_option("-v", "--verbose", action="count", dest="verbosity")
    (opts, args) = parser.parse_args()

    if len(args) != 1:
        print "args=%s" % args
        parser.error("incorrect number of arguments")

    if opts.verbosity > 1:
        print "opts=%s" % opts

    currentDir = os.getcwd()

    zipPath = os.path.join(currentDir, args[0])
    if not os.path.isfile(zipPath):
        parser.error("%s not exist... , please input exist zip file" % zipPath)

    outputDir = os.path.join(os.path.dirname(zipPath), "extract_imgs")
    if opts.dist_dir:
        if not os.path.isfile(opts.dist_dir):
            if not os.path.exists(opts.dist_dir):
                os.makedirs(opts.dist_dir)
            outputDir = opts.dist_dir
        else:
            parser.error("Can not mkdir %s" % opts.dist_dir)
    else:
         outputDir = os.path.join(os.path.dirname(zipPath), "extract_imgs")

    # Start
    if not isMergedZip(zipPath):
        print "%s is not multiple stage zip format!!!" % zipPath
        exit(0)

    # split
    retVal = splitMergedZip(zipPath, outputDir)
    if retVal == []:
        exit(-1)
    if opts.zip_only:
        print "Merged zip splitted"
        exit(0)

    for zip in retVal:
        if not os.path.isfile(zip):
            print  "Error: %s not exist..." % zip
            exit(-1)
        zfile = zipfile.ZipFile(zip)
        print "Decompressing " + zip
        for name in zfile.namelist():
            (dirname, filename) = os.path.split(name)
            dirname = os.path.join(outputDir, dirname)
            if not os.path.exists(dirname):
                os.makedirs(dirname)
            print " - %s" % os.path.join(dirname, filename)
            zfile.extract(name, dirname)

        zfile.close()
        os.remove(zip)

    # cat system.img back...
    system_list = glob.glob(os.path.join(outputDir, "system_*.img"))
    system_list.sort()
    print "system_list=%s" % system_list

    dest = os.path.join(outputDir, "system.img")
    with open(dest, 'wb') as outf:
        for f in system_list:
            with open(f, 'rb') as inf:
                print "Merging %s into %s ..." % (f, dest)
                outf.write(inf.read())
            os.remove(f)

    print "Files extracted."
    print "Images are under %s" % outputDir
